// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  notodos       Notodo[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notodo {
  id        String @id @default(cuid())
  title     String
  content   String
  userId    String
  activeAt  DateTime?
  weight    Float?
  displayTimeAsScore Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  thresholds Threshold[]
  challenges Challenge[]
}

model Threshold {
  id         String   @id @default(cuid())
  title      String
  content    String
  duration   Int
  weight     Float
  notodoId   String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  notodo     Notodo   @relation(fields: [notodoId], references: [id], onDelete: Cascade)
}

model Challenge {
  id        String    @id @default(cuid())
  notodoId  String
  startTime DateTime  @default(now())
  endTime   DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  notodo    Notodo    @relation(fields: [notodoId], references: [id], onDelete: Cascade)
  challengeNotes ChallengeNote[]
}

model ChallengeNote {
  id          String    @id @default(cuid())
  challengeId String
  content     String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}
