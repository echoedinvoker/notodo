generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  score         Int           @default(0)
  accounts      Account[]
  notodos       Notodo[]
  rewards       Reward[]
  rewardClaims  RewardClaim[]
  sessions      Session[]
  achievements  Achievement[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notodo {
  id                 String      @id @default(cuid())
  title              String
  content            String
  userId             String
  activeAt           DateTime?
  weight             Float?
  displayTimeAsScore Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  challenges         Challenge[]
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  thresholds         Threshold[]
}

model Threshold {
  id        String   @id @default(cuid())
  title     String
  content   String
  duration  Int
  weight    Float
  notodoId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notodo    Notodo   @relation(fields: [notodoId], references: [id], onDelete: Cascade)
  achievements AchievementThreshold[]
}

model Challenge {
  id             String          @id @default(cuid())
  notodoId       String
  startTime      DateTime        @default(now())
  endTime        DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  notodo         Notodo          @relation(fields: [notodoId], references: [id], onDelete: Cascade)
  challengeNotes ChallengeNote[]
}

model ChallengeNote {
  id          String    @id @default(cuid())
  challengeId String
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model Reward {
  id           String        @id @default(cuid())
  name         String
  description  String?
  pointCost    Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  rewardClaims RewardClaim[]
  achievements AchievementReward[]
}

model RewardClaim {
  id        String   @id @default(cuid())
  content   String   @default("")
  userId    String
  rewardId  String
  claimedAt DateTime @default(now())
  reward    Reward   @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  thresholds  AchievementThreshold[]
  rewards     AchievementReward[]
}

model AchievementThreshold {
  id            String      @id @default(cuid())
  achievementId String
  thresholdId   String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  threshold     Threshold   @relation(fields: [thresholdId], references: [id], onDelete: Cascade)

  @@unique([achievementId, thresholdId])
}

model AchievementReward {
  id            String      @id @default(cuid())
  achievementId String
  rewardId      String
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  reward        Reward      @relation(fields: [rewardId], references: [id], onDelete: Cascade)

  @@unique([achievementId, rewardId])
}
